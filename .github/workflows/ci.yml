name: CI
on:
  pull_request: {}
  push:
    branches: [ main ]

# Concurrency: cancel in-progress runs for the same ref (except main keeps history)
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

permissions:
  contents: read

env:
  PNPM_VERSION: 10.17.1

jobs:
  build-test:
    runs-on: ubuntu-latest
    outputs:
      lines: ${{ steps.coverage.outputs.lines }}
      branches: ${{ steps.coverage.outputs.branches }}
      functions: ${{ steps.coverage.outputs.functions }}
      statements: ${{ steps.coverage.outputs.statements }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - node: 22.x
            name: node22
    name: build-test (Node ${{ matrix.node }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Ensure pnpm available (fallback)
        shell: bash
        run: |
          if ! command -v pnpm >/dev/null 2>&1; then
            echo "pnpm not found; installing globally via npm";
            npm install -g pnpm@${PNPM_VERSION}
            pnpm -v || { echo 'pnpm still unavailable after install'; exit 1; }
          else
            echo "pnpm detected: $(pnpm -v)";
          fi

      - name: Get pnpm store path
        id: store
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.store.outputs.STORE_PATH }}
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm lint

      - name: Build
        run: pnpm build

      - name: Run tests (with coverage)
        run: pnpm test --silent --coverage --coverageReporters=text --coverageReporters=lcov --coverageReporters=json-summary
      - name: Extract coverage summary
        id: coverage
        run: |
          SUMMARY=$(grep -E "^All files" -r coverage/lcov-report/coverage-summary* 2>/dev/null || grep -E "^All files" coverage/coverage-summary* || true)
          if [ -f coverage/coverage-summary.json ]; then
            BR=$(jq '.total.branches.pct' coverage/coverage-summary.json); LN=$(jq '.total.lines.pct' coverage/coverage-summary.json); ST=$(jq '.total.statements.pct' coverage/coverage-summary.json); FN=$(jq '.total.functions.pct' coverage/coverage-summary.json);
            echo "lines=${LN}" >> $GITHUB_OUTPUT
            echo "branches=${BR}" >> $GITHUB_OUTPUT
            echo "functions=${FN}" >> $GITHUB_OUTPUT
            echo "statements=${ST}" >> $GITHUB_OUTPUT
          fi
          echo "summary_line=${SUMMARY}" >> $GITHUB_OUTPUT

      - name: Coverage summary (job summary)
        if: always()
        run: |
          {
            echo '### Coverage Metrics';
            if [ -n "${{ steps.coverage.outputs.lines }}" ]; then
              echo '';
              echo '| Metric | % |';
              echo '|--------|---|';
              echo "| Lines | ${{ steps.coverage.outputs.lines }} |";
              echo "| Branches | ${{ steps.coverage.outputs.branches }} |";
              echo "| Functions | ${{ steps.coverage.outputs.functions }} |";
              echo "| Statements | ${{ steps.coverage.outputs.statements }} |";
            else
              echo 'No coverage metrics captured.';
            fi
          } >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.name }}
          path: coverage

      - name: Summary
        if: always()
        run: |
          echo "Build & test workflow complete for Node ${{ matrix.node }}."

  coverage-comment:
    needs: build-test
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: Download coverage node22
        uses: actions/download-artifact@v4
        with:
          name: coverage-node22
          path: cov/node22
      - name: Build matrix coverage table
        id: table
        run: |
          echo "Downloaded artifact tree (debug):" >&2
          find cov -maxdepth 4 -type f -print >&2 || true

          # Prefer direct outputs from build-test job (more reliable than artifact parsing)
          LINES='${{ needs.build-test.outputs.lines }}'
          BRANCHES='${{ needs.build-test.outputs.branches }}'
          FUNCTIONS='${{ needs.build-test.outputs.functions }}'
          STATEMENTS='${{ needs.build-test.outputs.statements }}'

          # If any are empty, attempt to discover coverage-summary.json dynamically
            if [ -z "$LINES" ] || [ -z "$BRANCHES" ] || [ -z "$FUNCTIONS" ] || [ -z "$STATEMENTS" ]; then
              echo "Some coverage outputs missing; falling back to artifact scan" >&2
              SUMMARY_FILE=$(find cov -name coverage-summary.json | head -n1 || true)
              if [ -n "$SUMMARY_FILE" ]; then
                echo "Using summary file: $SUMMARY_FILE" >&2
                LINES=${LINES:-$(jq -r '.total.lines.pct' "$SUMMARY_FILE")}
                BRANCHES=${BRANCHES:-$(jq -r '.total.branches.pct' "$SUMMARY_FILE")}
                FUNCTIONS=${FUNCTIONS:-$(jq -r '.total.functions.pct' "$SUMMARY_FILE")}
                STATEMENTS=${STATEMENTS:-$(jq -r '.total.statements.pct' "$SUMMARY_FILE")}
              else
                echo "No coverage-summary.json found in artifact" >&2
              fi
            fi

          safe() { if [ -z "$1" ] || [ "$1" = "null" ]; then echo "n/a"; else echo "$1"; fi; }
          LINES=$(safe "$LINES"); BRANCHES=$(safe "$BRANCHES"); FUNCTIONS=$(safe "$FUNCTIONS"); STATEMENTS=$(safe "$STATEMENTS");

          {
            echo "### Coverage Summary (Matrix)";
            echo "| Node | Lines | Branches | Functions | Statements |";
            echo "|------|-------|----------|-----------|------------|";
            echo "| 22.x | ${LINES} | ${BRANCHES} | ${FUNCTIONS} | ${STATEMENTS} |";
          } > table.md

          echo "TABLE<<EOF" >> $GITHUB_OUTPUT
          cat table.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Post PR comment
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const body = process.env.TABLE || 'Coverage table unavailable';
              const marker = '### Coverage Summary (Matrix)';
              // Fetch existing comments
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                per_page: 100
              });
              const existing = comments.find(c => c.body && c.body.startsWith(marker));
              if (existing) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existing.id,
                  body
                });
                core.info('Updated existing coverage comment');
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body
                });
                core.info('Created new coverage comment');
              }
            } catch (err) {
              core.warning(`Skipping coverage comment (permission or API issue): ${err.message}`);
            }
        env:
          TABLE: ${{ steps.table.outputs.TABLE }}